### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


input AddTeamUserInput {
  email: String
  name: String
}

type AuthPayload {
  jwt: String!
  user: User
}

type CultureValue {
  id: ID!
  name: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DeletePayload {
  id: ID!
}

input DeleteUserInput {
  id: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  addTeamUser(input: AddTeamUserInput!): Team
  deleteUser(input: DeleteUserInput!): User
  login(input: LoginInput!): AuthPayload!
  removeTeamUser(id: String!): Team
  signup(input: SignupInput!): AuthPayload!
  updateResponse(input: UpdateResponseInput!): UpdateResponsePayload
  updateTeam(input: UpdateTeamInput!): Team!
  updateTeamUser(input: UpdateTeamUserInput!): User!
  updateUser(input: UpdateUserInput!): User!
}

type Query {
  cultureValues: [CultureValue!]!
  me: User!
  responses(input: ResponsesFilterInput!): [Response!]!
  team: Team!
}

type Response {
  feeling: String
  id: String
  sentAt: String
  submittedAt: String
  user: User
  userId: String!
}

input ResponsesFilterInput {
  from: String
  to: String
}

input SignupInput {
  email: String!
  name: String!
  password: String!
  teamName: String!
}

type Team {
  cultureValues: [CultureValue!]
  emoji: String!
  id: ID!
  moods: Boolean!
  name: String!
  recognition: Boolean!
  users: [User!]
}

input UpdateResponseInput {
  feeling: String
  id: String
}

type UpdateResponsePayload {
  jwt: String!
  response: Response!
}

input UpdateTeamInput {
  cultureValueIds: [String!]
  emoji: String
  id: String
  moods: Boolean
  name: String
  recognition: Boolean
}

input UpdateTeamUserInput {
  id: String
  tz: String
}

input UpdateUserInput {
  email: String
  name: String
  password: String
}

type User {
  email: String!
  id: ID!
  name: String!
  team: Team
  teamId: String!
  tz: String!
}
